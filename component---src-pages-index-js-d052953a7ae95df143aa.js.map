{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["IndexPage","chunkedPosts","arr","size","Array","from","length","Math","ceil","v","k","slice","chunk","data","allMarkdownRemark","edges","useState","page","setPage","posts","setPosts","useEffect","observer","IntersectionObserver","target","document","querySelector","entries","forEach","entry","isIntersecting","nextPage","Number","dataset","prevPosts","unobserve","threshold","rootMargin","observe","setAttribute","title","description","className","map","post","node","key","id","to","frontmatter","path","date","tags","tag","index","tldr","pageQuery"],"mappings":"6gCAqEeA,UAhEG,SAAC,GAAc,IAEzBC,EAmFR,SAAeC,EAAKC,QAAU,IAAVA,MAAO,GACzB,OAAOC,MAAMC,KAAK,CAAEC,OAAQC,KAAKC,KAAKN,EAAII,OAASH,KAAS,SAACM,EAAGC,GAAJ,OAAUR,EAAIS,MAAMD,EAAIP,EAAMO,EAAIP,EAAOA,MApFhFS,CAFS,EAAXC,KACcC,kBAAzBC,OADsB,EAINC,mBAAS,GAA1BC,EAJuB,KAIjBC,EAJiB,OAKJF,mBAASf,EAAagB,IAAzCE,EALuB,KAKhBC,EALgB,KAsC9B,OA/BAC,qBAAU,WACR,IAAIC,EACJ,GAAIC,qBAAsB,CACxB,IAAMC,EAASC,SAASC,cAAc,WAClCF,KACFF,EAAW,IAAIC,sBACb,SAAAI,GACEA,EAAQC,SAAQ,SAAAC,GACd,GAAIA,EAAMC,eAAgB,CACxB,IAAMC,EAAWC,OAAOR,EAAOS,QAAQhB,MAAQ,EAC/CC,EAAQa,GACJA,EAAW9B,EAAaK,QAC1Bc,GAAS,SAAAc,GACP,MAAM,GAAN,SAAWA,GAAX,EAAyBjC,EAAa8B,QAG1CT,EAASa,UAAUX,SAIzB,CACEY,UAAW,GACXC,WAAY,UAGPC,QAAQd,GACjBA,EAAOe,aAAa,YAAatB,QAMrC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKuB,MAAM,KAAKC,YAAY,4CAC5B,yBAAKC,UAAU,QACZvB,EAAMwB,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACT,6BAASH,UAAU,OAAOI,IAAKF,EAAKG,IAClC,kBAAC,OAAD,CAAML,UAAU,aAAaM,GAAIJ,EAAKK,YAAYC,MAC/CN,EAAKK,YAAYT,OAEpB,uBAAGE,UAAU,kBACX,8BAAOE,EAAKK,YAAYE,MACvBP,EAAKK,YAAYG,MAChBR,EAAKK,YAAYG,KAAKT,KAAI,SAACU,EAAKC,GAAN,OACxB,0BAAMZ,UAAU,UAAUI,IAAKQ,GAA/B,IACID,EADJ,SAKN,oCAAaT,EAAKK,YAAYM,aAUnC,IAAMC,EAAS","file":"component---src-pages-index-js-d052953a7ae95df143aa.js","sourcesContent":["import { graphql, Link } from 'gatsby';\nimport React, { useState, useEffect } from 'react';\nimport Layout from '../components/layout/Layout';\nimport SEO from '../components/seo';\n\nconst IndexPage = ({ data }) => {\n  const { edges: allPosts } = data.allMarkdownRemark;\n  const chunkedPosts = chunk(allPosts);\n\n  const [page, setPage] = useState(0);\n  const [posts, setPosts] = useState(chunkedPosts[page]);\n\n  useEffect(() => {\n    let observer;\n    if (IntersectionObserver) {\n      const target = document.querySelector('#footer');\n      if (target) {\n        observer = new IntersectionObserver(\n          entries => {\n            entries.forEach(entry => {\n              if (entry.isIntersecting) {\n                const nextPage = Number(target.dataset.page) + 1;\n                setPage(nextPage);\n                if (nextPage < chunkedPosts.length) {\n                  setPosts(prevPosts => {\n                    return [...prevPosts, ...chunkedPosts[nextPage]];\n                  });\n                }\n                observer.unobserve(target);\n              }\n            });\n          },\n          {\n            threshold: 0.1,\n            rootMargin: '10px',\n          }\n        );\n        observer.observe(target);\n        target.setAttribute('data-page', page);\n      }\n    }\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"首页\" description=\"coderfee coderfee.com coderfe 前端 Gatsby\" />\n      <div className=\"home\">\n        {posts.map(({ node: post }) => (\n          <article className=\"post\" key={post.id}>\n            <Link className=\"post-title\" to={post.frontmatter.path}>\n              {post.frontmatter.title}\n            </Link>\n            <p className=\"post-title_sub\">\n              <span>{post.frontmatter.date}</span>\n              {post.frontmatter.tags &&\n                post.frontmatter.tags.map((tag, index) => (\n                  <span className=\"sub-tag\" key={index}>\n                    #{tag}#\n                  </span>\n                ))}\n            </p>\n            <blockquote>{post.frontmatter.tldr}</blockquote>\n          </article>\n        ))}\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query markdownRemark {\n    allMarkdownRemark(sort: { order: DESC, fields: frontmatter___date }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            path\n            title\n            tldr\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction chunk(arr, size = 6) {\n  return Array.from({ length: Math.ceil(arr.length / size) }, (v, k) => arr.slice(k * size, k * size + size));\n}\n"],"sourceRoot":""}