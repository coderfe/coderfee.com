{"componentChunkName":"component---src-templates-blog-post-js","path":"/4-uses-of-array-map","result":{"data":{"markdownRemark":{"html":"<h2>在数组的每一项上调用一个函数</h2>\n<p>如前所述，<code class=\"language-text\">.map()</code> 接收一个回调函数作为它其中的一个参数，该回调函数的一个重要的参数是函数正在处理的当前值。这是一个必要的参数。使用这个参数，我们可以修改数组中的每一项并从中创建一个新函数。下面是一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> sweetArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sweeterArray <span class=\"token operator\">=</span> sweetArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sweetItem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sweetItem <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sweeterArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [4, 6, 8, 10, 70]</span></code></pre></div>\n<p>这个例子甚至可以简化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeSweeter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">sweetItem</span> <span class=\"token operator\">=></span> sweetItem <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sweetArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sweeterArray <span class=\"token operator\">=</span> sweetArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>makeSweeter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sweeterArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [4, 6, 8, 10, 70]</span></code></pre></div>\n<p>编写像 <code class=\"language-text\">sweetArray.map(makeSweeter)</code> 这样代码，增加代码的可读性。</p>\n<h2>把字符串转化为数组</h2>\n<p>我们知道，<code class=\"language-text\">.map()</code> 属于 <code class=\"language-text\">Array.prototype</code>。那我们如何使用它将一个字符串转化为一个数组呢？不用担心，我们将会使用特殊的 <code class=\"language-text\">.call()</code> 方法，而不会为字符串再开发一个方法。</p>\n<p>JavaScript 中所有东西都是对象，方法只是附加在这些对象上的函数。<code class=\"language-text\">.call()</code> 允许我们在一个对象上利用另一个对象的上下文。因此，我们将会把数组中 <code class=\"language-text\">.map()</code> 的上下文复制到字符串中。</p>\n<p><code class=\"language-text\">.call()</code> 可以传递参数，将要被使用的上下文，“原始函数的参数的参数”。听起来像是胡言乱语？下面是一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Chuloo'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newName <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token parameter\">eachLetter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>eachName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">a</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Ca', 'ha', 'ua', 'la', 'oa', 'oa']</span></code></pre></div>\n<p>我们在字符串上简单地使用了 <code class=\"language-text\">.map()</code> 的上下文，并且传递了一个 <code class=\"language-text\">.map()</code> 所期望函数参数。</p>\n<p>这个函数类似于 <code class=\"language-text\">.split()</code> 方法，只能在返回数组之前修改每个单独的字符。</p>\n<h2>在 JavaScript 库中渲染列表</h2>\n<p>JavaScript 类库，例如 <a href=\"https://reactjs.org/\">React</a> 利用 <code class=\"language-text\">.map()</code> 在列表中渲染条目。不过，这需要 JSX 语法，<code class=\"language-text\">.map()</code> 方法是被包裹在 JSX 语法中的。下面是一个 React 组件的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mike'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chris'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NameList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>NameList <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>你对 React 不熟悉？这是一个简单的无状态 React 组件，只渲染了一个 div 和列表。通过使用 <code class=\"language-text\">.map()</code> 来迭代最初创建的名称数组，渲染出每个单独的条目。这个组件使用 ReactDOM 呈现在 id 为 root 的 DOM 元素上。</p>\n<h2>重新格式化数组对象</h2>\n<p>如何在数组中处理对象？<code class=\"language-text\">.map()</code> 可以用来迭代数组中的对象，<em>修改每个单独对象的内容</em>并返回一个新数组。这些修改基于回调函数中返回的内容完成。下面是一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myUsers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'chuloo'</span><span class=\"token punctuation\">,</span> likes<span class=\"token operator\">:</span> <span class=\"token string\">'grilled chicken'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'chris'</span><span class=\"token punctuation\">,</span> likes<span class=\"token operator\">:</span> <span class=\"token string\">'cold beer'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'sam'</span><span class=\"token punctuation\">,</span> likes<span class=\"token operator\">:</span> <span class=\"token string\">'fish biscuits'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> usersByFood <span class=\"token operator\">=</span> myUsers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  container<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>likse<span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> container<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>usersByFood<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [{chuloo: \"grilled chicken\", age: 60}, {chris: \"cold beer\", age: 50}, {sam: \"fish biscuits\", age: 30}]</span></code></pre></div>\n<h2>总结</h2>\n<p>在这篇文章中，我们讨论了 JavaScript 中 <code class=\"language-text\">.map()</code> 的 4 种主要用法。要注意的是与其它方法的结合可以使 <code class=\"language-text\">.map()</code> 的功能被更强大的扩展和利用。试着寻找更多的用法！</p>","tableOfContents":"<ul>\n<li><a href=\"/4-uses-of-array-map/#%E5%9C%A8%E6%95%B0%E7%BB%84%E7%9A%84%E6%AF%8F%E4%B8%80%E9%A1%B9%E4%B8%8A%E8%B0%83%E7%94%A8%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0\">在数组的每一项上调用一个函数</a></li>\n<li><a href=\"/4-uses-of-array-map/#%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%95%B0%E7%BB%84\">把字符串转化为数组</a></li>\n<li><a href=\"/4-uses-of-array-map/#%E5%9C%A8-javascript-%E5%BA%93%E4%B8%AD%E6%B8%B2%E6%9F%93%E5%88%97%E8%A1%A8\">在 JavaScript 库中渲染列表</a></li>\n<li><a href=\"/4-uses-of-array-map/#%E9%87%8D%E6%96%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1\">重新格式化数组对象</a></li>\n<li><a href=\"/4-uses-of-array-map/#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>","frontmatter":{"path":"/4-uses-of-array-map","date":"Nov 10, 2018","title":"『译』你应该要知道的 Array.map() 的 4 种用法","tldr":"map() 通过在数组元素中每一项上调用一个函数来创建新的数组。map() 是一个非变异方法，它会创建一个新数组，而不是在被调用数组上做出更改。","tags":["JavaScript","译文"]},"timeToRead":3}},"pageContext":{"next":{"frontmatter":{"title":"『译』「Chrome Devtools」网络问题指南","path":"/network-issues-guide"}},"previous":{"frontmatter":{"title":"Vue.js 开发不完全指南","path":"/vuejs-develop-guide"}},"relatedPosts":[{"next":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"previous":{"frontmatter":{"title":"『书』擦去眼泪，如同掸去身上的稻草","path":"/read-think/huozhe-xusanguan"}},"node":{"frontmatter":{"path":"/typescript-in-action/check-types-javascript","tags":["TypeScript","JavaScript"],"title":"『TypeScript』如何对 JS 进行类型检查"}}},{"next":{"frontmatter":{"title":"五一游记","path":"/travel-notes"}},"previous":{"frontmatter":{"title":"远方有多远？请你告诉我——Hello World","path":"/the-past-three-years"}},"node":{"frontmatter":{"path":"/es2019","tags":["JavaScript"],"title":"『译』ES2019 简明指南"}}},{"next":{"frontmatter":{"title":"『书』按下 F5，刷新自己","path":"/2019-01-16-read"}},"previous":{"frontmatter":{"title":"『书』打发地铁通勤时间的书（书摘）","path":"/2019-03"}},"node":{"frontmatter":{"path":"/es2018-new-features","tags":["JavaScript","译文"],"title":"『译』每个 JavaSript 开发者都需要知道的 ES2018 新功能"}}},{"next":{"frontmatter":{"title":"2018 后会无期","path":"/2018"}},"previous":{"frontmatter":{"title":"『书』按下 F5，刷新自己","path":"/2019-01-16-read"}},"node":{"frontmatter":{"path":"/7-ways-of-javascript-function","tags":["JavaScript","译文"],"title":"『译』创建 JavaScript 函数的 7 种方式"}}},{"next":{"frontmatter":{"title":"Vue.js 开发不完全指南","path":"/vuejs-develop-guide"}},"previous":{"frontmatter":{"title":"2018 后会无期","path":"/2018"}},"node":{"frontmatter":{"path":"/handling-errors-in-javascript","tags":["JavaScript","译文"],"title":"『译』JavaScript 错误处理权威指南"}}},{"next":{"frontmatter":{"title":"『译』5 个小技巧，让你在 JavaScript 中写出更好的条件语句","path":"/write-better-javascript"}},"previous":{"frontmatter":{"title":"『译』你应该要知道的 Array.map() 的 4 种用法","path":"/4-uses-of-array-map"}},"node":{"frontmatter":{"path":"/network-issues-guide","tags":["Debug","Chrome","译文"],"title":"『译』「Chrome Devtools」网络问题指南"}}},{"next":{"frontmatter":{"title":"8 月随笔","path":"/feelings-in-august"}},"previous":{"frontmatter":{"title":"『译』「Chrome Devtools」网络问题指南","path":"/network-issues-guide"}},"node":{"frontmatter":{"path":"/write-better-javascript","tags":["JavaScript","译文"],"title":"『译』5 个小技巧，让你在 JavaScript 中写出更好的条件语句"}}},{"next":{"frontmatter":{"title":"IE8 兼容性总结","path":"/ie8-compatibility"}},"previous":{"frontmatter":{"title":"微信小程序——知乎日报","path":"/wechat-app-first-look"}},"node":{"frontmatter":{"path":"/use-lets-encrypt-in-wordpress","tags":["HTTPS","译文"],"title":"『译』在你的 WordPress 项目中使用 Let's Encrypt SSL"}}},{"next":{"frontmatter":{"title":"搭建个人博客 Hexo & Github Pages","path":"/build-your-blog-with-hexo-github-pages"}},"previous":{"frontmatter":{"title":"前端性能优化","path":"/front-end-performance-optimization-tips"}},"node":{"frontmatter":{"path":"/ajax","tags":["JavaScript"],"title":"Ajax学习笔记"}}}]}}}