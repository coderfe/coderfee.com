{"componentChunkName":"component---src-templates-blog-post-js","path":"/7-ways-of-javascript-function","result":{"data":{"markdownRemark":{"html":"<h2>函数</h2>\n<p>一个可以写一本书的 JavaScript 函数，我想其他人也有这种想法。</p>\n<p>但是今天我们长话短说。与其他比较流行的语言（如 Java）相比，函数被认为是 JavaScript 语言中的第一等公民。这意味着你可以将它们作为参数传递，让函数返回一个新函数，甚至将函数作为 JavaScript 语言中的任何其它类型的值。例如，函数可以是 JavaScript 对象中的一个属性（命名方法）。</p>\n<p>事实上，函数确实是 JavaScript 中的一等公民，因此使得这门语言非常灵活。例如，你在 JavaScript 中可以使用函数创建<em>闭包</em>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> increment<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> coolClosureCounter <span class=\"token operator\">=</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">coolClosureCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">coolClosureCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<h2>创建函数的 7 中方式</h2>\n<p>让 JavaScript 新手比较困惑的是函数的声明。在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions\">MDN</a> 里我们可以找到对函数定义的定义：</p>\n<p>一个 JavaScript 函数用 function 关键字声明，后面跟着函数名和圆括号 <code class=\"language-text\">()</code>。</p>\n<p>在熟悉 JavaScript 之后，该语句仍然有效。但是我要向你展示，在 2018 年以 7 中不同的方式创建 JavaScript 函数。</p>\n<h3>函数声明/定义/语句</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fun with Functions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我想这是我们学的第一种方式，没什么稀奇的。看起来和其它语言很类似。</p>\n<h3>函数表达式</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fun with Functions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意，如果你在声明函数表达式之前调用它，那么就会出错：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: foo is undefined</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hei!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>箭头函数</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fun with Functions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 ES2015（即 ES6） 之后，我们可以使用非常小巧方便的箭头函数表达式。这个语法在链接内置的 <code class=\"language-text\">map/filter/reduce</code> 等方法时特别有用。有点像下面的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'Eirik'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Nicolai'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Henrik'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Jan'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Paal Kristian'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Kristine'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Espen'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"nicolai\", \"henrik\", \"paal kristian\", \"kristine\"]</span></code></pre></div>\n<p>但是在使用箭头函数之前，请考虑以下几个事项：</p>\n<ul>\n<li>函数体内没有特殊的 <code class=\"language-text\">arguments</code> 对象</li>\n<li>你不能使用 <code class=\"language-text\">new (() =&gt; {})</code></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions\">箭头函数没有属于自己的 <code class=\"language-text\">this</code>、<code class=\"language-text\">arguments</code>、<code class=\"language-text\">super</code> 或者 <code class=\"language-text\">new.target</code></a></li>\n</ul>\n<h3>函数的构造函数</h3>\n<p>好吧，这很尴尬。这种方式不简单也不直观。而且 MDN 不推荐这种方式。但是如果你知道一种用法，我们很乐意了解。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myStrangeFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"console.log(a + 'with Functions')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myStrangeFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fun'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Fun with Functions</span></code></pre></div>\n<p>函数体是由一个字符串创建的？！有趣的函数呀！还没有结束呢🤓。</p>\n<h3>其它方式……</h3>\n<ul>\n<li>生成器函数表达式</li>\n<li>生成器函数声明</li>\n<li>生成器函数构造函数</li>\n</ul>\n<p>生成器函数不是这篇文章的主题。<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">在这里查看更多信息</a>。</p>\n<h3>IIFE 和匿名函数</h3>\n<p>函数非常酷，它们也可以是匿名的。在 JavaScript 中，我们允许未命名的函数。你知道可以立即调用它们吗？立即调用函数表达式（IIFE）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ......</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/7-ways-of-javascript-function/#%E5%87%BD%E6%95%B0\">函数</a></li>\n<li>\n<p><a href=\"/7-ways-of-javascript-function/#%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E7%9A%84-7-%E4%B8%AD%E6%96%B9%E5%BC%8F\">创建函数的 7 中方式</a></p>\n<ul>\n<li><a href=\"/7-ways-of-javascript-function/#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E5%AE%9A%E4%B9%89%E8%AF%AD%E5%8F%A5\">函数声明/定义/语句</a></li>\n<li><a href=\"/7-ways-of-javascript-function/#%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\">函数表达式</a></li>\n<li><a href=\"/7-ways-of-javascript-function/#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\">箭头函数</a></li>\n<li><a href=\"/7-ways-of-javascript-function/#%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\">函数的构造函数</a></li>\n<li><a href=\"/7-ways-of-javascript-function/#%E5%85%B6%E5%AE%83%E6%96%B9%E5%BC%8F\">其它方式……</a></li>\n<li><a href=\"/7-ways-of-javascript-function/#iife-%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\">IIFE 和匿名函数</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"path":"/7-ways-of-javascript-function","date":"Jan 13, 2019","title":"『译』创建 JavaScript 函数的 7 种方式","tldr":"认识 JavaScript 一等公民——函数，以及所以关于它的定义或声明方式。","tags":["JavaScript","译文"]},"timeToRead":3}},"pageContext":{"next":{"frontmatter":{"title":"2018 后会无期","path":"/2018"}},"previous":{"frontmatter":{"title":"『书』按下 F5，刷新自己","path":"/2019-01-16-read"}},"relatedPosts":[{"next":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"previous":{"frontmatter":{"title":"『书』擦去眼泪，如同掸去身上的稻草","path":"/read-think/huozhe-xusanguan"}},"node":{"frontmatter":{"path":"/typescript-in-action/check-types-javascript","tags":["TypeScript","JavaScript"],"title":"『TypeScript』如何对 JS 进行类型检查"}}},{"next":{"frontmatter":{"title":"五一游记","path":"/travel-notes"}},"previous":{"frontmatter":{"title":"远方有多远？请你告诉我——Hello World","path":"/the-past-three-years"}},"node":{"frontmatter":{"path":"/es2019","tags":["JavaScript"],"title":"『译』ES2019 简明指南"}}},{"next":{"frontmatter":{"title":"『书』按下 F5，刷新自己","path":"/2019-01-16-read"}},"previous":{"frontmatter":{"title":"『书』打发地铁通勤时间的书（书摘）","path":"/2019-03"}},"node":{"frontmatter":{"path":"/es2018-new-features","tags":["JavaScript","译文"],"title":"『译』每个 JavaSript 开发者都需要知道的 ES2018 新功能"}}},{"next":{"frontmatter":{"title":"Vue.js 开发不完全指南","path":"/vuejs-develop-guide"}},"previous":{"frontmatter":{"title":"2018 后会无期","path":"/2018"}},"node":{"frontmatter":{"path":"/handling-errors-in-javascript","tags":["JavaScript","译文"],"title":"『译』JavaScript 错误处理权威指南"}}},{"next":{"frontmatter":{"title":"『译』「Chrome Devtools」网络问题指南","path":"/network-issues-guide"}},"previous":{"frontmatter":{"title":"Vue.js 开发不完全指南","path":"/vuejs-develop-guide"}},"node":{"frontmatter":{"path":"/4-uses-of-array-map","tags":["JavaScript","译文"],"title":"『译』你应该要知道的 Array.map() 的 4 种用法"}}},{"next":{"frontmatter":{"title":"『译』5 个小技巧，让你在 JavaScript 中写出更好的条件语句","path":"/write-better-javascript"}},"previous":{"frontmatter":{"title":"『译』你应该要知道的 Array.map() 的 4 种用法","path":"/4-uses-of-array-map"}},"node":{"frontmatter":{"path":"/network-issues-guide","tags":["Debug","Chrome","译文"],"title":"『译』「Chrome Devtools」网络问题指南"}}},{"next":{"frontmatter":{"title":"8 月随笔","path":"/feelings-in-august"}},"previous":{"frontmatter":{"title":"『译』「Chrome Devtools」网络问题指南","path":"/network-issues-guide"}},"node":{"frontmatter":{"path":"/write-better-javascript","tags":["JavaScript","译文"],"title":"『译』5 个小技巧，让你在 JavaScript 中写出更好的条件语句"}}},{"next":{"frontmatter":{"title":"IE8 兼容性总结","path":"/ie8-compatibility"}},"previous":{"frontmatter":{"title":"微信小程序——知乎日报","path":"/wechat-app-first-look"}},"node":{"frontmatter":{"path":"/use-lets-encrypt-in-wordpress","tags":["HTTPS","译文"],"title":"『译』在你的 WordPress 项目中使用 Let's Encrypt SSL"}}},{"next":{"frontmatter":{"title":"搭建个人博客 Hexo & Github Pages","path":"/build-your-blog-with-hexo-github-pages"}},"previous":{"frontmatter":{"title":"前端性能优化","path":"/front-end-performance-optimization-tips"}},"node":{"frontmatter":{"path":"/ajax","tags":["JavaScript"],"title":"Ajax学习笔记"}}}]}}}