{"componentChunkName":"component---src-templates-blog-post-js","path":"/es2019","result":{"data":{"markdownRemark":{"html":"<p>ESNext 经常用来表示下一个 JavaScript 版本的名称。</p>\n<p>目前 ECMAScript 的版本是发布于 2018 年 6 月份的 <strong>ES2018</strong>。</p>\n<p>历史上 JavaScript 版本的标准化是在夏季，所以我们可以期待一下即将在 2019 年夏天发布的 <strong>ECMAScript 2019</strong>。</p>\n<p>本文写作时，ES2018 已经发布，而 <strong>ESNext 就是 ES2019</strong>。</p>\n<p>针对 ECMAScript 标准的提案被组织为 Stages，Stages 1-3 是新功能的孵化器，一旦该功能到达 Stage 4，那么它最终就会被纳入到新标准。</p>\n<p>本文写作时，我们有一些位于 Stage 4 的新功能。我在本文中将介绍这些功能。主流浏览器的最新版本已经实现了这些功能中的绝大部分。</p>\n<ul>\n<li><code class=\"language-text\">Array.prototype.{flat, flatMap}</code></li>\n<li>可选 <code class=\"language-text\">catch</code> 绑定</li>\n<li><code class=\"language-text\">Object.fromEntries()</code></li>\n<li><code class=\"language-text\">String.prototype.{trimStart, trimEnd}</code></li>\n<li><code class=\"language-text\">Symbol.prototype.description</code></li>\n<li>JSON 改进</li>\n<li>更好的 <code class=\"language-text\">JSON.stringify()</code></li>\n<li><code class=\"language-text\">Function.prototype.toString()</code></li>\n</ul>\n<p>其中一些变化主要用于内部使用，但是弄清楚发生了什么变化对我们也非常有帮助。</p>\n<h2><code class=\"language-text\">Array.prototype.{flat, flatMap}</code></h2>\n<p><code class=\"language-text\">flat()</code> 是一个新的数组方法，它可以从一个多维数组创建一个一维数组。</p>\n<p>例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Sheep'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wolf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['Dog', 'Sheep', 'Wolf']</span></code></pre></div>\n<p>默认情况下，该方法只会扁平化第一层级的数组。但是它也接受一个参数，来设置你想要扁平化数组的层级。如果参数为 <code class=\"language-text\">Infinity</code>，则会扁平化所有层级。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Sheep'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Wolf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//[ 'Dog', 'Sheep', [ 'Wolf' ] ]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Sheep'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Wolf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//[ 'Dog', 'Sheep', 'Wolf' ]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Sheep'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Wolf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//[ 'Dog', 'Sheep', 'Wolf' ]</span></code></pre></div>\n<p>如果你对 JavaScript 数组的 <code class=\"language-text\">map()</code> 方法比较熟悉，正如你所知道的，它可以在数组的每个元素上执行一个函数。</p>\n<p><code class=\"language-text\">flatMap()</code> 是一个数组的新方法，它结合了 <code class=\"language-text\">flat()</code> 和 <code class=\"language-text\">map()</code>。当你想在 <code class=\"language-text\">map()</code> 回调返回的数组上调用一个函数，并且返回一个扁平化的数组时，它非常有用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">'My dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is awesome'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">words</span> <span class=\"token operator\">=></span> words<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [['My', 'Dog'], ['is', 'awesome']]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'My dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is awesome'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">words</span> <span class=\"token operator\">=></span> words<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['My', 'Dog', 'is', 'awesome']</span></code></pre></div>\n<h2>可选 catch 绑定</h2>\n<p>某些情况下我们不需要为 try/catch 的 catch 块绑定一个参数。</p>\n<p>过去我们必须这样写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//处理错误</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果我们没有必要用 <code class=\"language-text\">e</code> 来分析错误，现在则可以直接省略它：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//处理错误</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">Object.fromEntries()</code></h2>\n<p>JavaScript 对象在 <a href=\"https://flaviocopes.com/es2017/\">ES2017</a> 中引入了 <code class=\"language-text\">entries()</code> 方法。</p>\n<p><code class=\"language-text\">entries()</code> 方法会返回一个包含它自身所有属性的数组，像 <code class=\"language-text\">[key, value]</code> 这样的数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">87</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [['name', 'Fred'], ['age', '87']]</span></code></pre></div>\n<p>ES2019 引入了 <code class=\"language-text\">Object.fromEntries()</code> 方法，它可以从类似上面的属性数组中创建一个新对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">87</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> entries <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newPerson <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nperson <span class=\"token operator\">!==</span> newPerson<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2><code class=\"language-text\">String.prototype.{trimStart, trimEnd}</code></h2>\n<p>这个功能在 v8/Chrome 中已经接近一年了，然而它在 ES2019 中才会被标准化。</p>\n<h3><code class=\"language-text\">trimStart()</code></h3>\n<p>将原始字符串开头的空白符移除，并返回一个新字符串：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'Testing'</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Testing'</span>\n<span class=\"token string\">' Testing'</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Testing'</span>\n<span class=\"token string\">' Testing '</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Testing '</span>\n<span class=\"token string\">'Testing'</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Testing'</span></code></pre></div>\n<h3><code class=\"language-text\">trimEnd()</code></h3>\n<p>将原始字符串尾部的空白符移除，并返回一个新的字符串：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'Testing'</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Testing'</span>\n<span class=\"token string\">' Testing'</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//' Testing'</span>\n<span class=\"token string\">' Testing '</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//' Testing'</span>\n<span class=\"token string\">'Testing '</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'Testing'</span></code></pre></div>\n<h2><code class=\"language-text\">Symbol.prototype.description</code></h2>\n<p>你现在可以通过访问其 <code class=\"language-text\">description</code> 属性来检索一个 Symbol 的描述了，而不必使用 <code class=\"language-text\">toString()</code> 方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> testSymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestSymbol<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Test</span></code></pre></div>\n<h2>JSON 改进</h2>\n<p>在此改进之前，解析 <a href=\"https://flaviocopes.com/json/\">JSON</a> 的字符串中不允许使用换行符（\\u2028）和段落分隔符（\\u2029）。</p>\n<p>在包含它们的字符串中使用 <code class=\"language-text\">JSON.parse()</code> 时，会导致 <code class=\"language-text\">SyntaxError</code>。但是现在它们被定义为 JSON 的标准，也可以正确地解析。</p>\n<h2>更好的 <code class=\"language-text\">JSON.stringify()</code></h2>\n<p>修复 <code class=\"language-text\">JSON.stringify()</code> 在处理代理 UTF-8 码点（U+D800 到 U+DFFF）的输出。</p>\n<p>在此之前，调用 <code class=\"language-text\">JSON.stringify()</code> 会返回一个异常格式的 Unicode 字符 (a “�”)。</p>\n<p>现在，这些代理码点可以使用 <code class=\"language-text\">JSON.stringify()</code> 安全地表示为字符串，并且可以使用 <code class=\"language-text\">JSON.parse()</code> 转换为其原始形式。</p>\n<h2><code class=\"language-text\">Function.protoytype.toString()</code></h2>\n<p>函数一直有一个 <code class=\"language-text\">toString()</code> 的实例方法，它返回包含函数代码的字符串。</p>\n<p>ES2019 引入的变化是更改其返回值，避免剥离注释或者空白符（例如空格），以便更准确地表示函数的定义。</p>\n<p>如果我们有如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token comment\">/* this is bar */</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>之前的行为是：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">bar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function bar() {}</span></code></pre></div>\n<p>现在的行为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">bar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//function /* this is bar */ bar() {}</span></code></pre></div>\n<blockquote>\n<p>原文链接：<a href=\"https://flaviocopes.com/es2019/\">The ES2019 Guide</a></p>\n</blockquote>","tableOfContents":"<ul>\n<li><a href=\"/es2019/#code-classlanguage-textarrayprototypeflat-flatmapcode\"><code class=\"language-text\">Array.prototype.{flat, flatMap}</code></a></li>\n<li><a href=\"/es2019/#%E5%8F%AF%E9%80%89-catch-%E7%BB%91%E5%AE%9A\">可选 catch 绑定</a></li>\n<li><a href=\"/es2019/#code-classlanguage-textobjectfromentriescode\"><code class=\"language-text\">Object.fromEntries()</code></a></li>\n<li>\n<p><a href=\"/es2019/#code-classlanguage-textstringprototypetrimstart-trimendcode\"><code class=\"language-text\">String.prototype.{trimStart, trimEnd}</code></a></p>\n<ul>\n<li><a href=\"/es2019/#code-classlanguage-texttrimstartcode\"><code class=\"language-text\">trimStart()</code></a></li>\n<li><a href=\"/es2019/#code-classlanguage-texttrimendcode\"><code class=\"language-text\">trimEnd()</code></a></li>\n</ul>\n</li>\n<li><a href=\"/es2019/#code-classlanguage-textsymbolprototypedescriptioncode\"><code class=\"language-text\">Symbol.prototype.description</code></a></li>\n<li><a href=\"/es2019/#json-%E6%94%B9%E8%BF%9B\">JSON 改进</a></li>\n<li><a href=\"/es2019/#%E6%9B%B4%E5%A5%BD%E7%9A%84-code-classlanguage-textjsonstringifycode\">更好的 <code class=\"language-text\">JSON.stringify()</code></a></li>\n<li><a href=\"/es2019/#code-classlanguage-textfunctionprotoytypetostringcode\"><code class=\"language-text\">Function.protoytype.toString()</code></a></li>\n</ul>","frontmatter":{"path":"/es2019","date":"Jun 18, 2019","title":"『译』ES2019 简明指南","tldr":"ECMAScript 是 JavaScript 的标准，它通常简写为 ES。在本文中让我们一览 ES2019 中新增的功能。","tags":["JavaScript"]},"timeToRead":4}},"pageContext":{"next":{"frontmatter":{"title":"五一游记","path":"/travel-notes"}},"previous":{"frontmatter":{"title":"远方有多远？请你告诉我——Hello World","path":"/the-past-three-years"}},"relatedPosts":[{"next":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"previous":{"frontmatter":{"title":"『书』擦去眼泪，如同掸去身上的稻草","path":"/read-think/huozhe-xusanguan"}},"node":{"frontmatter":{"path":"/typescript-in-action/check-types-javascript","tags":["TypeScript","JavaScript"],"title":"『TypeScript』如何对 JS 进行类型检查"}}},{"next":{"frontmatter":{"title":"『书』按下 F5，刷新自己","path":"/2019-01-16-read"}},"previous":{"frontmatter":{"title":"『书』打发地铁通勤时间的书（书摘）","path":"/2019-03"}},"node":{"frontmatter":{"path":"/es2018-new-features","tags":["JavaScript","译文"],"title":"『译』每个 JavaSript 开发者都需要知道的 ES2018 新功能"}}},{"next":{"frontmatter":{"title":"2018 后会无期","path":"/2018"}},"previous":{"frontmatter":{"title":"『书』按下 F5，刷新自己","path":"/2019-01-16-read"}},"node":{"frontmatter":{"path":"/7-ways-of-javascript-function","tags":["JavaScript","译文"],"title":"『译』创建 JavaScript 函数的 7 种方式"}}},{"next":{"frontmatter":{"title":"Vue.js 开发不完全指南","path":"/vuejs-develop-guide"}},"previous":{"frontmatter":{"title":"2018 后会无期","path":"/2018"}},"node":{"frontmatter":{"path":"/handling-errors-in-javascript","tags":["JavaScript","译文"],"title":"『译』JavaScript 错误处理权威指南"}}},{"next":{"frontmatter":{"title":"『译』「Chrome Devtools」网络问题指南","path":"/network-issues-guide"}},"previous":{"frontmatter":{"title":"Vue.js 开发不完全指南","path":"/vuejs-develop-guide"}},"node":{"frontmatter":{"path":"/4-uses-of-array-map","tags":["JavaScript","译文"],"title":"『译』你应该要知道的 Array.map() 的 4 种用法"}}},{"next":{"frontmatter":{"title":"8 月随笔","path":"/feelings-in-august"}},"previous":{"frontmatter":{"title":"『译』「Chrome Devtools」网络问题指南","path":"/network-issues-guide"}},"node":{"frontmatter":{"path":"/write-better-javascript","tags":["JavaScript","译文"],"title":"『译』5 个小技巧，让你在 JavaScript 中写出更好的条件语句"}}},{"next":{"frontmatter":{"title":"搭建个人博客 Hexo & Github Pages","path":"/build-your-blog-with-hexo-github-pages"}},"previous":{"frontmatter":{"title":"前端性能优化","path":"/front-end-performance-optimization-tips"}},"node":{"frontmatter":{"path":"/ajax","tags":["JavaScript"],"title":"Ajax学习笔记"}}}]}}}