{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript-in-action/advanced-types","result":{"data":{"markdownRemark":{"html":"<h2>交叉类型</h2>\n<p>交叉类型是把多种类型结合为一种类型，使之拥有所有类型的成员，使用 <code class=\"language-text\">&amp;</code> 进行连接：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  company<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 交叉类型</span>\n<span class=\"token keyword\">type</span> NewType <span class=\"token operator\">=</span> User <span class=\"token operator\">&amp;</span> Employee<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> tom<span class=\"token operator\">:</span> NewType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> company<span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>联合类型</h2>\n<p>联合类型表示一个值可以是一种或多种类型，使用 <code class=\"language-text\">|</code> 进行表示：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<p>如果某个值是联合类型，那么我们只能访问该联合类型的共用成员：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">layEggs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fish</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">layEggs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getSmallPet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bird <span class=\"token operator\">|</span> Fish <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> pet <span class=\"token operator\">=</span> <span class=\"token function\">getSmallPet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">layEggs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<h2>字面量类型</h2>\n<p>既可以限制变量的类型，也可以限制变量的取值范围。</p>\n<ol>\n<li>字符串</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>数值</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>索引类型</h2>\n<p>场景之一是从一个对象中取出某些属性：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> o<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>用 TS 实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> pluck<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> o<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  manufacturer<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  model<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  year<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> taxi<span class=\"token operator\">:</span> Car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  manufacturer<span class=\"token operator\">:</span> <span class=\"token string\">'Toyota'</span><span class=\"token punctuation\">,</span>\n  model<span class=\"token operator\">:</span> <span class=\"token string\">'Camry'</span><span class=\"token punctuation\">,</span>\n  year<span class=\"token operator\">:</span> <span class=\"token number\">2018</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> modelYear <span class=\"token operator\">=</span> <span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span>taxi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Toyota', 2018]</span></code></pre></div>\n<p><code class=\"language-text\">keyof T</code> 是类型 <code class=\"language-text\">T</code> 中已知属性的并集，如 <code class=\"language-text\">keyof Car</code> 即表示 <code class=\"language-text\">&#39;manufacturer&#39; | &#39;model&#39; | &#39;year&#39;</code>。</p>\n<p><code class=\"language-text\">T[K]</code> 表示 <code class=\"language-text\">T</code> 类型中 <code class=\"language-text\">K</code> 属性的类型。</p>\n<h2>映射类型</h2>\n<p>TypeScript 中内置几种映射类型，通常和泛型结合使用。</p>\n<ul>\n<li><code class=\"language-text\">Readonly</code></li>\n<li><code class=\"language-text\">Partial</code></li>\n<li><code class=\"language-text\">Pick</code></li>\n<li><code class=\"language-text\">Record</code></li>\n</ul>\n<h2>条件类型</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">X</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Y</span></code></pre></div>\n<p>这个表达式表示如果 <code class=\"language-text\">T</code> 能够分配给 <code class=\"language-text\">U</code>，则类型是 <code class=\"language-text\">X</code>，否则类型是 <code class=\"language-text\">Y</code>。</p>\n<h2>类型保护</h2>\n<p>TypeScript 能在特定的区块中确保变量属于某种确定的类型，以便在该区块中使用该变量。在 TypeScript 中有几种方法可以创建类型保护：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Java</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">helloJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  java<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JavaScript</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">helloJavaScript</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  javascript<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">lang</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lang<span class=\"token operator\">:</span> Java <span class=\"token operator\">|</span> JavaScript<span class=\"token punctuation\">,</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. instanceof 关键词</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lang <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Java</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    lang<span class=\"token punctuation\">.</span><span class=\"token function\">helloJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    lang<span class=\"token punctuation\">.</span><span class=\"token function\">helloJavaScript</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 2. in 关键词</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'java'</span> <span class=\"token keyword\">in</span> lang<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">.</span>javascript<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3. typeof 关键词</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>类型别名</h2>\n<p><code class=\"language-text\">type</code> 关键词可以为类型创建别名，它可以为原始类型、联合类型、元组或者其他指定的类型创建别名：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Name <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">'TypeScript'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Pet <span class=\"token operator\">=</span> Fish <span class=\"token operator\">|</span> Bird<span class=\"token punctuation\">;</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/typescript-in-action/advanced-types/#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B\">交叉类型</a></li>\n<li><a href=\"/typescript-in-action/advanced-types/#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B\">联合类型</a></li>\n<li><a href=\"/typescript-in-action/advanced-types/#%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B\">字面量类型</a></li>\n<li><a href=\"/typescript-in-action/advanced-types/#%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B\">索引类型</a></li>\n<li><a href=\"/typescript-in-action/advanced-types/#%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B\">映射类型</a></li>\n<li><a href=\"/typescript-in-action/advanced-types/#%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B\">条件类型</a></li>\n<li><a href=\"/typescript-in-action/advanced-types/#%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4\">类型保护</a></li>\n<li><a href=\"/typescript-in-action/advanced-types/#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D\">类型别名</a></li>\n</ul>","frontmatter":{"path":"/typescript-in-action/advanced-types","date":"Aug 25, 2019","title":"『TypeScript』高级数据类型","tldr":"TypeScript 高级类型，例如交叉类型、联合类型、枚举类型等。","tags":["TypeScript"]},"timeToRead":2}},"pageContext":{"next":{"frontmatter":{"title":"『TypeScript』基本数据类型","path":"/typescript-in-action/basic-types"}},"previous":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"relatedPosts":[{"next":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"previous":{"frontmatter":{"title":"『书』擦去眼泪，如同掸去身上的稻草","path":"/read-think/huozhe-xusanguan"}},"node":{"frontmatter":{"path":"/typescript-in-action/check-types-javascript","tags":["TypeScript","JavaScript"],"title":"『TypeScript』如何对 JS 进行类型检查"}}},{"next":{"frontmatter":{"title":"『TypeScript』高级数据类型","path":"/typescript-in-action/advanced-types"}},"previous":{"frontmatter":{"title":"『TypeScript』如何对 JS 进行类型检查","path":"/typescript-in-action/check-types-javascript"}},"node":{"frontmatter":{"path":"/typescript-in-action/utility-types","tags":["TypeScript"],"title":"『TypeScript』实用类型"}}},{"next":{"frontmatter":{"title":"远方有多远？请你告诉我——Hello World","path":"/the-past-three-years"}},"previous":{"frontmatter":{"title":"『TypeScript』高级数据类型","path":"/typescript-in-action/advanced-types"}},"node":{"frontmatter":{"path":"/typescript-in-action/basic-types","tags":["TypeScript"],"title":"『TypeScript』基本数据类型"}}}]}}}