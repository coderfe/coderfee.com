{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript-in-action/basic-types","result":{"data":{"markdownRemark":{"html":"<h2>Boolean</h2>\n<p>布尔值是最基本也是最简单的数据类型，它只有两种值：<code class=\"language-text\">true</code>/<code class=\"language-text\">false</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> isDone<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Number</h2>\n<p>JS 中的所有数值都是浮点值，TS 也一样，在 TS 中数值的类型为 <code class=\"language-text\">number</code>，TS 同时也支持二进制等其它进制形式表示的数值：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> decimal<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> binary<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>String</h2>\n<p>字符串类型跟 JS 并无二致：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Hello TypeScript!'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Array</h2>\n<p>TS 中定义数组有两种形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 1. 在类型关键词后跟 **[]**</span>\n<span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. 泛型</span>\n<span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Tuple</h2>\n<p>JS 没有元组这种数据类型，在我了解的语言中，Python 有这种数据类型。它有两个特点，确定的元素个数，明确的数据类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<h2>Enum</h2>\n<p>枚举是从 C# 和 Java 中借鉴的数据类型，它可以用来为一组数值集合赋予更加友好的名称：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">RED</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">GREEN</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BLUE</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> color<span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span><span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>默认情况下，枚举成员的数值是从 <code class=\"language-text\">0</code> 开始，依次递增。或者，也可以手动指定：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">RED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">GREEN</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2</span>\n  <span class=\"token constant\">BLUE</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果你知道枚举成员的值，那么通过它可以反向查找到其对应的枚举成员名称：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">RED</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">GREEN</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BLUE</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'BLUE'</span></code></pre></div>\n<h2>Any</h2>\n<p><code class=\"language-text\">Any</code> 顾名思义，也就是『随便，都可以』：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token string\">'any'</span><span class=\"token punctuation\">;</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Void</h2>\n<p><code class=\"language-text\">void</code> 有点像 <code class=\"language-text\">any</code> 的对立面：没有任何类型。可以将其视为没有返回值类型函数的返回值类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warning'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Null &#x26; Undefined</h2>\n<p>TS 中 <code class=\"language-text\">null</code> 和 <code class=\"language-text\">undefined</code> 都有对应的类型名称 <code class=\"language-text\">null</code> 和 <code class=\"language-text\">undefined</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> u<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">null</code> 和 <code class=\"language-text\">undefined</code> 类型是其他所有类型的子类型，也就是说，你可以把前两者赋值给其它任何类型。如果配置了 <code class=\"language-text\">--strictNullChecks</code> 选项，<code class=\"language-text\">null</code> 和 <code class=\"language-text\">undefined</code> 将只能赋值给 <code class=\"language-text\">any</code> 和它们各自对应的类型。</p>\n<h2>Never</h2>\n<p><code class=\"language-text\">never</code> 类型表示值的类型从不出现。例如，当 <code class=\"language-text\">never</code> 作为函数的返回值类型时，该函数总是会抛出异常或者永远不返回。</p>\n<p><code class=\"language-text\">never</code> 类型可以是每种类型的子类型，可以分配给每种类型；但是没有类型是 <code class=\"language-text\">never</code> 类型的子类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">infiniteLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Object</h2>\n<p><code class=\"language-text\">object</code> 表示非原始类型，即除了 <code class=\"language-text\">number</code>、 <code class=\"language-text\">string</code>、 <code class=\"language-text\">boolean</code>、 <code class=\"language-text\">symbol</code>、 <code class=\"language-text\">null</code>、 <code class=\"language-text\">undefined</code> 之外的其它类型。</p>\n<h2>类型断言</h2>\n<p>类型断言类似其它语言中的类型转换，就像告诉编译器：『相信我，我知道我在做什么』。TS 中的类型断言有两种形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 1. 尖括号语法</span>\n<span class=\"token keyword\">let</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Hello TS'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> valLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span>\n\n<span class=\"token comment\">// 2. as 语法</span>\n<span class=\"token keyword\">let</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Hello TS'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> valLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span></code></pre></div>\n<p>如果要在 JSX 中使用类型断言，只允许使用 <code class=\"language-text\">as</code> 语法。</p>","tableOfContents":"<ul>\n<li><a href=\"/typescript-in-action/basic-types/#boolean\">Boolean</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#number\">Number</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#string\">String</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#array\">Array</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#tuple\">Tuple</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#enum\">Enum</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#any\">Any</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#void\">Void</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#null--undefined\">Null &#x26; Undefined</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#never\">Never</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#object\">Object</a></li>\n<li><a href=\"/typescript-in-action/basic-types/#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\">类型断言</a></li>\n</ul>","frontmatter":{"path":"/typescript-in-action/basic-types","date":"Aug 11, 2019","title":"『TypeScript』基本数据类型","tldr":"JavaScript 是一门动态类型语言，它对变量的类型非常宽容，虽然足够灵活，但是也埋下了一些『坏代码』的味道。 而 TypeScript 中添加的类型系统，让 JS 拥有了静态类型检查系统，强大且灵活。","tags":["TypeScript"]},"timeToRead":3}},"pageContext":{"next":{"frontmatter":{"title":"远方有多远？请你告诉我——Hello World","path":"/the-past-three-years"}},"previous":{"frontmatter":{"title":"『TypeScript』高级数据类型","path":"/typescript-in-action/advanced-types"}},"relatedPosts":[{"next":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"previous":{"frontmatter":{"title":"『书』擦去眼泪，如同掸去身上的稻草","path":"/read-think/huozhe-xusanguan"}},"node":{"frontmatter":{"path":"/typescript-in-action/check-types-javascript","tags":["TypeScript","JavaScript"],"title":"『TypeScript』如何对 JS 进行类型检查"}}},{"next":{"frontmatter":{"title":"『TypeScript』高级数据类型","path":"/typescript-in-action/advanced-types"}},"previous":{"frontmatter":{"title":"『TypeScript』如何对 JS 进行类型检查","path":"/typescript-in-action/check-types-javascript"}},"node":{"frontmatter":{"path":"/typescript-in-action/utility-types","tags":["TypeScript"],"title":"『TypeScript』实用类型"}}},{"next":{"frontmatter":{"title":"『TypeScript』基本数据类型","path":"/typescript-in-action/basic-types"}},"previous":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"node":{"frontmatter":{"path":"/typescript-in-action/advanced-types","tags":["TypeScript"],"title":"『TypeScript』高级数据类型"}}}]}}}