{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript-in-action/check-types-javascript","result":{"data":{"markdownRemark":{"html":"<p>JavaScript 是一门动态类型语言，我们在编写代码时，一不注意漏掉一个问题可能会导致生产环境出现大问题，例如忽略某个函数的参数或返回值类型。在越大的工程中，越健壮的代码显得尤为重要，那么如何借助 VSCode 和 TS 写出更加健壮且易读的代码呢？</p>\n<h2>使用 VSCode 和 WebStorm 等</h2>\n<p>VSCode 和 WebStorm 属于现代编程工具，它们对 JS 的类型提供了更好的支持，比如类型检查和类型推导，在编写代码阶段就可以避免很多不必要的错误。</p>\n<h2>JSDoc</h2>\n<p>JSDoc 其实就是类似于 JavaDoc 的一种注释性文档，借助开发工具可以对 JS 的变量进行类型检查，而且也可以生成 HTML 文档方便阅读。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * add\n * @param {String} x\n * @param {String} y\n * @returns {String}\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@param</code> 可以指定参数的类型，<code class=\"language-text\">@returns</code> 则可以指定函数的返回值类型。如果使用 VSCode 等工具，在调用时会进行类型检查，如果参数类型不匹配的话，则会出现错误提示。</p>\n<p>JSDoc 支持很多 <code class=\"language-text\">@</code> 关键词，可以参考<a href=\"https://jsdoc.app/\">文档</a>。它甚至可以支持自定义<strong>类型</strong>，但是写法比较繁琐，如果用在大型项目中的话，维护这些注释的话，得不偿失。</p>\n<h2>TypeScript 声明文件</h2>\n<p>TS 声明文件有几种生成方式：</p>\n<ul>\n<li>在 <code class=\"language-text\">tsconfig.json</code> 中配置 <code class=\"language-text\">declaration</code></li>\n<li>安装已有声明文件，例如 <code class=\"language-text\">yarn add -D @types/lodash</code></li>\n<li>手动编写声明文件，TS 有提供一些<a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/templates.html\">模板</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/typescript-in-action/check-types-javascript/#%E4%BD%BF%E7%94%A8-vscode-%E5%92%8C-webstorm-%E7%AD%89\">使用 VSCode 和 WebStorm 等</a></li>\n<li><a href=\"/typescript-in-action/check-types-javascript/#jsdoc\">JSDoc</a></li>\n<li><a href=\"/typescript-in-action/check-types-javascript/#typescript-%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6\">TypeScript 声明文件</a></li>\n</ul>","frontmatter":{"path":"/typescript-in-action/check-types-javascript","date":"Aug 31, 2019","title":"『TypeScript』如何对 JS 进行类型检查","tldr":"借助 VSCode 和 TypeScript 对 JS 进行类型检查。","tags":["TypeScript","JavaScript"]},"timeToRead":1}},"pageContext":{"next":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"previous":{"frontmatter":{"title":"『书』擦去眼泪，如同掸去身上的稻草","path":"/read-think/huozhe-xusanguan"}},"relatedPosts":[{"next":{"frontmatter":{"title":"『TypeScript』高级数据类型","path":"/typescript-in-action/advanced-types"}},"previous":{"frontmatter":{"title":"『TypeScript』如何对 JS 进行类型检查","path":"/typescript-in-action/check-types-javascript"}},"node":{"frontmatter":{"path":"/typescript-in-action/utility-types","tags":["TypeScript"],"title":"『TypeScript』实用类型"}}},{"next":{"frontmatter":{"title":"『TypeScript』基本数据类型","path":"/typescript-in-action/basic-types"}},"previous":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"node":{"frontmatter":{"path":"/typescript-in-action/advanced-types","tags":["TypeScript"],"title":"『TypeScript』高级数据类型"}}},{"next":{"frontmatter":{"title":"远方有多远？请你告诉我——Hello World","path":"/the-past-three-years"}},"previous":{"frontmatter":{"title":"『TypeScript』高级数据类型","path":"/typescript-in-action/advanced-types"}},"node":{"frontmatter":{"path":"/typescript-in-action/basic-types","tags":["TypeScript"],"title":"『TypeScript』基本数据类型"}}},{"next":{"frontmatter":{"title":"五一游记","path":"/travel-notes"}},"previous":{"frontmatter":{"title":"远方有多远？请你告诉我——Hello World","path":"/the-past-three-years"}},"node":{"frontmatter":{"path":"/es2019","tags":["JavaScript"],"title":"『译』ES2019 简明指南"}}},{"next":{"frontmatter":{"title":"『书』按下 F5，刷新自己","path":"/2019-01-16-read"}},"previous":{"frontmatter":{"title":"『书』打发地铁通勤时间的书（书摘）","path":"/2019-03"}},"node":{"frontmatter":{"path":"/es2018-new-features","tags":["JavaScript","译文"],"title":"『译』每个 JavaSript 开发者都需要知道的 ES2018 新功能"}}},{"next":{"frontmatter":{"title":"2018 后会无期","path":"/2018"}},"previous":{"frontmatter":{"title":"『书』按下 F5，刷新自己","path":"/2019-01-16-read"}},"node":{"frontmatter":{"path":"/7-ways-of-javascript-function","tags":["JavaScript","译文"],"title":"『译』创建 JavaScript 函数的 7 种方式"}}},{"next":{"frontmatter":{"title":"Vue.js 开发不完全指南","path":"/vuejs-develop-guide"}},"previous":{"frontmatter":{"title":"2018 后会无期","path":"/2018"}},"node":{"frontmatter":{"path":"/handling-errors-in-javascript","tags":["JavaScript","译文"],"title":"『译』JavaScript 错误处理权威指南"}}},{"next":{"frontmatter":{"title":"『译』「Chrome Devtools」网络问题指南","path":"/network-issues-guide"}},"previous":{"frontmatter":{"title":"Vue.js 开发不完全指南","path":"/vuejs-develop-guide"}},"node":{"frontmatter":{"path":"/4-uses-of-array-map","tags":["JavaScript","译文"],"title":"『译』你应该要知道的 Array.map() 的 4 种用法"}}},{"next":{"frontmatter":{"title":"8 月随笔","path":"/feelings-in-august"}},"previous":{"frontmatter":{"title":"『译』「Chrome Devtools」网络问题指南","path":"/network-issues-guide"}},"node":{"frontmatter":{"path":"/write-better-javascript","tags":["JavaScript","译文"],"title":"『译』5 个小技巧，让你在 JavaScript 中写出更好的条件语句"}}},{"next":{"frontmatter":{"title":"搭建个人博客 Hexo & Github Pages","path":"/build-your-blog-with-hexo-github-pages"}},"previous":{"frontmatter":{"title":"前端性能优化","path":"/front-end-performance-optimization-tips"}},"node":{"frontmatter":{"path":"/ajax","tags":["JavaScript"],"title":"Ajax学习笔记"}}}]}}}