{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript-in-action/utility-types","result":{"data":{"markdownRemark":{"html":"<h2>Partial&#x3C;T></h2>\n<p>它会构造一个新类型，并将类型 <code class=\"language-text\">T</code> 的所有属性设置为可选。该类型是类型 <code class=\"language-text\">T</code> 的子集。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// age: 16</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'simon'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// OK</span></code></pre></div>\n<p>如果用 TypeScript 手动实现，代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Readonly&#x3C;T></h2>\n<p>它将构造一个新类型，并将类型 <code class=\"language-text\">T</code> 的所有属性设置为 <code class=\"language-text\">readonly</code>，这意味着新类型的属性都不能重新赋值了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'simon'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<p>TypeScript 手动实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Record&#x3C;K, T></h2>\n<p>构造一个具有类型 <code class=\"language-text\">T</code> 的一组属性 <code class=\"language-text\">K</code> 的新类型，该类型经常用于将一种类型的属性映射到另一种类型上。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> PageInfo <span class=\"token operator\">=</span> <span class=\"token string\">'home'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'about'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'contact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>PageInfo<span class=\"token punctuation\">,</span> Page<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  home<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  about<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'about'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'contact'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Pick&#x3C;T, K></h2>\n<p>从类型 <code class=\"language-text\">T</code> 中选取一些属性 <code class=\"language-text\">K</code> 作为新类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TodoPreview <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'completed'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Todo'</span><span class=\"token punctuation\">,</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Omit&#x3C;T, K></h2>\n<p>从类型 <code class=\"language-text\">T</code> 中选取所有属性，然后再移除指定的 <code class=\"language-text\">K</code> 类型的属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TodoPreview <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'description'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Todo'</span><span class=\"token punctuation\">,</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Exclude&#x3C;T, U></h2>\n<p>通过从类型 <code class=\"language-text\">T</code> 中排除可分配给类型 <code class=\"language-text\">U</code> 来构造新类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'c'</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span></code></pre></div>\n<h2>Extract&#x3C;T, U></h2>\n<p>通过提取类型 <code class=\"language-text\">T</code> 中可以分配给类型 <code class=\"language-text\">U</code> 来构造新类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a' | 'b'</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Function</span></code></pre></div>\n<h2>NonNullable&#x3C;T></h2>\n<p>从类型 <code class=\"language-text\">T</code> 中排除 <code class=\"language-text\">null</code> 和 <code class=\"language-text\">undefined</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string[]</span></code></pre></div>\n<h2>Required&#x3C;T></h2>\n<p>构造一个新类型，并将类型 <code class=\"language-text\">T</code> 的所有属性设置为必选。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> tom<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// OK</span>\n\n<span class=\"token keyword\">const</span> simon<span class=\"token operator\">:</span> Required<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'simon'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// age: 16,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Error</span></code></pre></div>\n<h2>ThisType&#x3C;T></h2>\n<p>它不返回任何转换类型，仅作为 <code class=\"language-text\">this</code> 上下文的标记。要使用该类型，必须在 <code class=\"language-text\">tsconfig.json</code> 中启用 <code class=\"language-text\">noImplicitThis</code>。</p>","tableOfContents":"<ul>\n<li><a href=\"/typescript-in-action/utility-types/#partialt\">Partial&#x3C;T></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#readonlyt\">Readonly&#x3C;T></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#recordk-t\">Record&#x3C;K, T></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#pickt-k\">Pick&#x3C;T, K></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#omitt-k\">Omit&#x3C;T, K></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#excludet-u\">Exclude&#x3C;T, U></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#extractt-u\">Extract&#x3C;T, U></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#nonnullablet\">NonNullable&#x3C;T></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#requiredt\">Required&#x3C;T></a></li>\n<li><a href=\"/typescript-in-action/utility-types/#thistypet\">ThisType&#x3C;T></a></li>\n</ul>","frontmatter":{"path":"/typescript-in-action/utility-types","date":"Aug 28, 2019","title":"『TypeScript』实用类型","tldr":"TypeScript 提供了一些全局可用的实用程序类型，通常和泛型一起使用，以便进行类型转换。","tags":["TypeScript"]},"timeToRead":2}},"pageContext":{"next":{"frontmatter":{"title":"『TypeScript』高级数据类型","path":"/typescript-in-action/advanced-types"}},"previous":{"frontmatter":{"title":"『TypeScript』如何对 JS 进行类型检查","path":"/typescript-in-action/check-types-javascript"}},"relatedPosts":[{"next":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"previous":{"frontmatter":{"title":"『书』擦去眼泪，如同掸去身上的稻草","path":"/read-think/huozhe-xusanguan"}},"node":{"frontmatter":{"path":"/typescript-in-action/check-types-javascript","tags":["TypeScript","JavaScript"],"title":"『TypeScript』如何对 JS 进行类型检查"}}},{"next":{"frontmatter":{"title":"『TypeScript』基本数据类型","path":"/typescript-in-action/basic-types"}},"previous":{"frontmatter":{"title":"『TypeScript』实用类型","path":"/typescript-in-action/utility-types"}},"node":{"frontmatter":{"path":"/typescript-in-action/advanced-types","tags":["TypeScript"],"title":"『TypeScript』高级数据类型"}}},{"next":{"frontmatter":{"title":"远方有多远？请你告诉我——Hello World","path":"/the-past-three-years"}},"previous":{"frontmatter":{"title":"『TypeScript』高级数据类型","path":"/typescript-in-action/advanced-types"}},"node":{"frontmatter":{"path":"/typescript-in-action/basic-types","tags":["TypeScript"],"title":"『TypeScript』基本数据类型"}}}]}}}